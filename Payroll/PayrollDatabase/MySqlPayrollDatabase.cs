//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using MySql.Data.MySqlClient;
namespace Payroll
{
	class MySqlPayrollDatabase : PayrollDatabase
	{
		private MySqlConnection connection;

		public MySqlPayrollDatabase()
		{
			string myConnectionString;
			
			myConnectionString = "server=104.224.133.206;uid=liucailin;" +
				"pwd=0903;database=Payroll;pooling=true;";

			/*myConnectionString = "server=127.0.0.1;uid=root;" +
				"pwd=0903;database=payroll;pooling=true;";*/
			
			try
			{
				connection = new MySql.Data.MySqlClient.MySqlConnection();
				connection.ConnectionString = myConnectionString;
				connection.Open();
			}
			catch (MySql.Data.MySqlClient.MySqlException ex)
			{
				Console.WriteLine(ex.Number + " " + ex.Message);
			}
		}

		public void AddEmployee (int id, Employee employee)
		{
			string addCommand = "insert into Employee values (@EmpId, @Name, @Address, " +
				"@ScheduleType, @PaymentMethodType, @PaymentClassificationType)";
			MySqlCommand command = new MySqlCommand(addCommand, connection);

			command.Prepare();
			command.Parameters.AddWithValue("@EmpId", employee.EmpId);
			command.Parameters.AddWithValue("@Name", employee.Name);
			command.Parameters.AddWithValue("@Address", employee.Address);
			//command.Parameters.AddWithValue("@ScheduleType", employee.Schedule.GetType().Name);
			command.Parameters.AddWithValue("@ScheduleType", ScheduleCode(employee.Schedule));
			//command.Parameters.AddWithValue("@PaymentMethodType", employee.Method.GetType().Name);
			SavePaymentMethod(employee);
			command.Parameters.AddWithValue("@PaymentMethodType", MethodCode(employee.Method));

			command.Parameters.AddWithValue("@PaymentClassificationType", employee.Classification.GetType().Name);

			command.ExecuteNonQuery();

		}

		private void SavePaymentMethod(Employee employee)
		{
			PaymentMethod method = employee.Method;
			if (method is DirectDepositMethod)
			{
				DirectDepositMethod ddMethod = method as DirectDepositMethod;
				string add = "insert into DirectDepositAccount values (@Bank, @Account, @EmpId)";
				MySqlCommand addCommand = new MySqlCommand(add, connection);
				addCommand.Parameters.AddWithValue("@Bank", ddMethod.Bankname);
				addCommand.Parameters.AddWithValue("@Account", ddMethod.Account);
				addCommand.Parameters.AddWithValue("@EmpId", employee.EmpId);

				addCommand.ExecuteNonQuery();
			}
		}

		private static string ScheduleCode(PaymentSchedule schedule)
		{
			if (schedule is MonthlySchedule)
				return "monthly";
			else if (schedule is WeeklySchedule)
				return "weekly";
			else if (schedule is BiweeklySchedule)
				return "biweekly";
			else
				return "unkonw";
		}

		private static string MethodCode(PaymentMethod method)
		{
			if (method is HoldMethod)
				return "hold";
			else if (method is DirectDepositMethod)
				return "directdeposite";
			else if (method is MailMethod)
				return "mail";
			else
				return "unkonw";
		}

		public Employee GetEmployee (int id)
		{
			throw new NotImplementedException ();
		}

		public System.Collections.ArrayList GetAllEmployeeIds ()
		{
			throw new NotImplementedException ();
		}

		public void DeleteEmployee (int id)
		{
			throw new NotImplementedException ();
		}

		public void AddUnionMember (int id, Employee employee)
		{
			throw new NotImplementedException ();
		}

		public Employee GetUnionMember (int id)
		{
			throw new NotImplementedException ();
		}

		public void RemoveUnionMember (int memberId)
		{
			throw new NotImplementedException ();
		}
	}
}

